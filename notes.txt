
1) Angular modules are meant to be containers that group all routes/components trees
that can be loaded independently of each other. That way browser will only load parts
that are needed for that part of the site (not all).

2) Every component, service, directive, pipe must be registered in a Module, 
to be available there. They (except serivces) are ONLY available in THAT module.
Small apps usually have one module, but as it grow bigger, it requires more modules.

3) Bootstraping of our app begins with "main.ts" file(loaded by Webpack via "angular.json" file),
which loads an AppModule (the root of the tree) -> which then includes AppComponent as the one
providing logic. AppModule is only aware of AppComponent, but it's index.html that actually displays it.

4) next: look at app.module.ts
5) We should place all static files in "assets" folder and that's because in "angular.json" there is
  -> assets['src/assets'] -- for images and files like that
but for CSS styles, there is -> styles['src/style.css'] array.

6) next: events-list.component.html, same but TS
7) next: events-thumbnail.component.ts

8) Angular helps with CSS. Every component that declares their CSS / path to CSS file is active
only for that specific component. That way, having same html classes won't affect others' component
css classes. But, if we want a style to be affective through the whole app, we can write it
inside /styles.css in the root of the project.

9) PROP BINDING and String Interpolation are used to bind data from component into a template.
In the background they implement Observer pattern so if data in component changes, the template
should know and be passed new version of data.

* Interpolation {{ object.prop }} is used just to display data
* PB is used to bind data to the property of a DOM element.
  [property]="expression"
  DON'Ts:
  ~ Expression cannot include assignments (=, +=, ++..),
  ~ cannot use "new" keyword,
  ~ you can't chain expressions with ;
  ~ you can't access anything on the global namespace (window, console)

  RECOMMENDATIONS:
  ~ Calling an expression should NOT CHANGE any data.
  ~ Expressions should be fast and simple
  ~ Each time we call exp, it should return same result -> Idempotent

-EVENT BINDING
<button (click)="doSmth()"></button> 
Here, we are binding doSmth() to JS's click event.
Statements - DON'Ts:
~ Assignments EXCEPT with =, we can do it like that
~ No global namespace
~ No "new" for making objects

DOs:
~ We can chain statements with ;
~ Can have side effects and they often do (make changes to the state of an app)
~ Don't have to be Idempotent and fast
~ Should be simple

10) If we somehow forget to include property binding 
[event]='event', code would break.
Angular has a nice way of optional safety. In events-thumbnail, everytime we call "event?.someProp"
we are assuring that someProp is displayed ONLY if there is an event. Also, we don't need to handle
nested objects like this: "event?.location?.address" bcz event? handles it too. But, if not all
objects have location, we'd need location? too.

11) Services allow you to define business logic in a separate file and then inject that serivces in
other classes whenever we need it. One service should be capable of doing one thing.
If we think of a DB, one table in DB --> one Model would be one service 
(Events Service -> get, getOne, insert, update, delete). 
Our EventListComponent shouldn't take care of providing data!!!

class EventListComponent {
  events: any;
  let eventService = new EventService();
  events = eventsService.getEvents();
}

This is one step better than to have array of events in EventsListComponent, but...
What if elsewhere in our app we decided to -- in some cases, we should get data from Async call,
and in another cases we want to get them from local browser storage? With this code, we'd have no way
to use different type of EventService. Basically, we'd change ONE LINE of code, saying which other 
Dependency we want to use, and nothing else should be rewritten, all would work fine.
So that's DEPENDENCY INJECTION. To Inject instances on classes that the class use and depends on.
Also, with the new = EventService() our services has another reason to change, but should have only ONE.

class EventListComponent {
  events: any;
  constructor (private eService: EventService) {
    events = eService.getEvents()
  }
}

On the backend, we'd use Dependency Injection on type of database we want to use. For example, if we have
SQL-DB, but we want NO-SQL DB bcz of the performance issues, our front app would say which Dependency it wants
(for example NO-SQL, but specific: ElasticSearch) and then it'd use code made for purpose of Elastic queries.
None of the code should be rewritten.

12) Another way to use Services is that they hold state that is accessible throughout your app.
Example: Authentication -> to log with user is in current session

13) ROUTING -- see next: router.ts, event-details, app.module.ts

14) We need to tell Angular where on our web server our app is hosted
By default, our app is hosted at the root "/" -> website.com/
But if our app is for example hosted in website.com/public then we'd need to tell 
Angular so that it knows WHATS ITS ROUTES ARE RELATIVE TO, so it can parse URL.

We do that by editing index.html: <base href="/">

15) When working with routing system:
  1) Add <router-outlet></router-outlet> to AppComponent (EventAppComponent in our case)
  2) Define routes for each page in /src/app/routes.ts
  3) Load routes in AppModule -> RouterModule.forRoot(appRoutes // which is representation of our routes.ts)
  4) See if <base> is there in index.html


_______*_______ HTTP and RxJS _______*_______

16) Promises vs Observables
- Promise represent a single value in the future
- Observables represent 0 or more values now OR in the future
- Observables can be either sync or asynchronous
- Obs are streams of observable data (values changed over time)
- Obs can deal with time diffrently, have advanced operations like:
  1) mathematical aggregation
  2) buffering (we get several results together in batches)
  3) debouncing (we can't get too many results if they happen to quickly)
  4) distinct or filtering
  5) combining observables into a single one
  6) retry (if first try fails, try again)






